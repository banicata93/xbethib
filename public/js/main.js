document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded, calling loadPredictions()');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ –≥—Ä–µ—à–∫–∞
    const loadingIndicator = document.getElementById('loading-indicator');
    const errorMessage = document.getElementById('error-message');
    const retryButton = document.getElementById('retry-button');
    
    // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –µ–ª–µ–º–µ–Ω—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ
    const debugInfo = document.getElementById('debug-info');
    if (debugInfo) {
        debugInfo.style.display = 'none';
    }
    
    // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ navbar-toggler-icon
    const navbarTogglerIcon = document.querySelector('.navbar-toggler-icon');
    if (navbarTogglerIcon) {
        navbarTogglerIcon.style.display = 'none';
    }
    
    if (retryButton) {
        retryButton.addEventListener('click', () => {
            // –°–∫—Ä–∏–≤–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –≥—Ä–µ—à–∫–∞
            if (errorMessage) errorMessage.style.display = 'none';
            // –ü–æ–∫–∞–∑–≤–∞–º–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ
            if (loadingIndicator) loadingIndicator.style.display = 'block';
            // –û–ø–∏—Ç–≤–∞–º–µ –¥–∞ –∑–∞—Ä–µ–¥–∏–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ç–µ –æ—Ç–Ω–æ–≤–æ
            setTimeout(() => {
                loadPredictions();
            }, 1000);
        });
    }
    
    // –û–±–Ω–æ–≤—è–≤–∞–º–µ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞, –∑–∞ –¥–∞ –≤–∫–ª—é—á–≤–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∞—Ç–∞
    const today = new Date();
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}/${(today.getMonth() + 1).toString().padStart(2, '0')}/${today.getFullYear()}`;
    const pageTitle = document.querySelector('.predictions-container h1');
    if (pageTitle) {
        pageTitle.textContent = `Predictions (${formattedDate})`;
    }
    
    loadPredictions();
});

function loadPredictions() {
    console.log('loadPredictions function called');
    
    // –í–∑–µ–º–∞–º–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∫—ä–º –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ
    const loadingIndicator = document.getElementById('loading-indicator');
    const errorMessage = document.getElementById('error-message');
    const predictionsTable = document.getElementById('predictions-table');
    const predictionsBody = document.getElementById('predictions-body');
    
    // –ü–æ–∫–∞–∑–≤–∞–º–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ
    if (loadingIndicator) loadingIndicator.style.display = 'block';
    
    // –°–∫—Ä–∏–≤–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –≥—Ä–µ—à–∫–∞
    if (errorMessage) errorMessage.style.display = 'none';
    
    // –ü—Ä–∞–≤–∏–º –¥–≤–µ –ø–∞—Ä–∞–ª–µ–ª–Ω–∏ –∑–∞—è–≤–∫–∏
    Promise.all([
        fetch('/api/predictions/public').then(response => response.ok ? response.json() : []),
        fetch('/api/botPredictions/public').then(response => response.ok ? response.json() : [])
    ])
    .then(([regularPredictions, botPredictions]) => {
        console.log('Fetched regular predictions:', regularPredictions.length);
        console.log('Fetched bot predictions:', botPredictions.length);
        
        // –°–∫—Ä–∏–≤–∞–º–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ
        if (loadingIndicator) loadingIndicator.style.display = 'none';
        
        // –û–±–µ–¥–∏–Ω—è–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ –≤ –µ–¥–∏–Ω –º–∞—Å–∏–≤
        const allPredictions = [...regularPredictions, ...botPredictions];
        
        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏
        if (!allPredictions || allPredictions.length === 0) {
            console.log('No predictions found');
            if (errorMessage) {
                errorMessage.style.display = 'block';
                errorMessage.querySelector('p').textContent = 'No predictions available.';
            }
            return;
        }
        
        // –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ç–µ, –∑–∞ –¥–∞ –ø–æ–∫–∞–∑–≤–∞–º–µ —Å–∞–º–æ —Ç–µ–∑–∏ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 2 –¥–Ω–∏ –∏ –±—ä–¥–µ—â–∏—Ç–µ
        const now = new Date();
        const twoDaysAgo = new Date(now);
        twoDaysAgo.setDate(now.getDate() - 2);
        twoDaysAgo.setHours(0, 0, 0, 0); // –ó–∞–¥–∞–≤–∞–º–µ –Ω–∞—á–∞–ª–æ—Ç–æ –Ω–∞ –¥–µ–Ω—è –æ—Ç–ø—Ä–µ–¥–∏ 2 –¥–Ω–∏
        
        console.log('Filtering predictions from:', twoDaysAgo.toISOString());
        
        const filteredPredictions = allPredictions.filter(prediction => {
            const matchDate = new Date(prediction.matchDate);
            return matchDate >= twoDaysAgo;
        });
        
        console.log('Filtered predictions count:', filteredPredictions.length);
        
        // –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ç–µ –ø–æ –¥–∞—Ç–∞ (–Ω–∞–π-—Å–∫–æ—Ä–æ—à–Ω–∏—Ç–µ –ø—ä—Ä–≤–∏)
        filteredPredictions.sort((a, b) => new Date(a.matchDate) - new Date(b.matchDate));
        
        // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
        if (predictionsTable) predictionsTable.style.display = 'block';
        
        // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
        if (predictionsBody) {
            predictionsBody.innerHTML = '';
            
            // –ì—Ä—É–ø–∏—Ä–∞–º–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ç–µ –ø–æ –¥–∞—Ç–∞
            const groupedPredictions = {};
            filteredPredictions.forEach(prediction => {
                const date = new Date(prediction.matchDate);
                // –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –¥–∞—Ç–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ, —Å –∫–æ—Ä–µ–∫—Ç–Ω–∏—è –¥–µ–Ω –∏ –º–µ—Å–µ—Ü
                const dateKey = `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}`;
                
                if (!groupedPredictions[dateKey]) {
                    groupedPredictions[dateKey] = [];
                }
                
                groupedPredictions[dateKey].push(prediction);
            });
            
            // –î–æ–±–∞–≤—è–º–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
            let isAdInserted = false;
            
            Object.keys(groupedPredictions).forEach((dateKey, index) => {
                // –î–æ–±–∞–≤—è–º–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª –∑–∞ –¥–∞—Ç–∞—Ç–∞
                const dateSeparator = document.createElement('tr');
                dateSeparator.className = 'date-separator';
                dateSeparator.innerHTML = `<td colspan="4">${dateKey} <span style="opacity: 0.8; margin-left: 5px;">${new Date(groupedPredictions[dateKey][0].matchDate).toLocaleString('default', { month: 'long' })}</span></td>`;
                predictionsBody.appendChild(dateSeparator);
                
                // –î–æ–±–∞–≤—è–º–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ç–µ –∑–∞ —Ç–∞–∑–∏ –¥–∞—Ç–∞
                groupedPredictions[dateKey].forEach(prediction => {
                    // –†–∞–∑–¥–µ–ª—è–º–µ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞ –Ω–∞ –æ—Ç–¥–µ–ª–Ω–∏ —Ç–∞–≥–æ–≤–µ
                    let predictionTags = [];
                    if (prediction.prediction && prediction.prediction.includes('&')) {
                        predictionTags = prediction.prediction.split('&').map(tag => tag.trim());
                    } else if (prediction.prediction) {
                        predictionTags = [prediction.prediction];
                    } else {
                        predictionTags = ['N/A'];
                    }
                    
                    // –°—ä–∑–¥–∞–≤–∞–º–µ HTML –∑–∞ —Ç–∞–≥–æ–≤–µ—Ç–µ
                    const tagsHTML = predictionTags.map(tag => {
                        // –î–æ–±–∞–≤—è–º–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞ —É–≤–µ—Ä–µ–Ω–æ—Å—Ç
                        let confidenceHTML = '';
                        if (prediction.confidence && prediction.confidence > 0) {
                            let confidenceClass = 'confidence-medium';
                            if (prediction.confidence >= 80) {
                                confidenceClass = 'confidence-high';
                            } else if (prediction.confidence < 60) {
                                confidenceClass = 'confidence-low';
                            }
                            confidenceHTML = `<span class="confidence-indicator ${confidenceClass}">${prediction.confidence}%</span>`;
                        }
                        
                        return `<span class="prediction-tag">${tag} ${confidenceHTML}</span>`;
                    }).join('');
                    
                    // –î–æ–±–∞–≤—è–º–µ –∫–ª–∞—Å –∑–∞ –∏–∑—Ç–æ—á–Ω–∏–∫–∞ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞
                    const sourceClass = prediction.source === 'FootballBot' ? 'bot-prediction' : '';
                    
                    const row = document.createElement('tr');
                    row.className = sourceClass;
                    row.innerHTML = `
                        <td><span class="team-flag">${prediction.leagueFlag || 'üåç'}</span></td>
                        <td>${prediction.homeTeam || 'Unknown'}</td>
                        <td>${prediction.awayTeam || 'Unknown'}</td>
                        <td class="prediction-cell">${tagsHTML}</td>
                    `;
                    predictionsBody.appendChild(row);
                });
                
                // –î–æ–±–∞–≤—è–º–µ —Ä–µ–∫–ª–∞–º–∞—Ç–∞ —Å–ª–µ–¥ –ø—ä—Ä–≤–∞—Ç–∞ –¥–∞—Ç–∞
                if (index === 0 && !isAdInserted && window.innerWidth <= 768) {
                    isAdInserted = true;
                    
                    // –°—ä–∑–¥–∞–≤–∞–º–µ —Ä–µ–¥ –∑–∞ —Ä–µ–∫–ª–∞–º–∞—Ç–∞
                    const adRow = document.createElement('tr');
                    adRow.className = 'in-table-ad-row d-md-none';
                    adRow.innerHTML = `
                        <td colspan="4" class="p-0">
                            <div class="in-table-ad">
                                <a href="https://www.goleadortips.com" target="_blank" class="in-table-ad-link">
                                    <div class="in-table-ad-content">
                                        <div class="in-table-ad-icon">
                                            <i class="fas fa-futbol"></i>
                                        </div>
                                        <div class="in-table-ad-text">
                                            <div class="in-table-ad-title">GoleadorTips</div>
                                            <div class="in-table-ad-description">Expert Football Predictions</div>
                                        </div>
                                        <div class="in-table-ad-button">
                                            <span>Visit Now</span>
                                        </div>
                                    </div>
                                </a>
                            </div>
                        </td>
                    `;
                    predictionsBody.appendChild(adRow);
                }
            });
        }
    })
    .catch(error => {
        console.error('Error loading predictions:', error);
        
        // –°–∫—Ä–∏–≤–∞–º–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ
        if (loadingIndicator) loadingIndicator.style.display = 'none';
        
        // –ü–æ–∫–∞–∑–≤–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –≥—Ä–µ—à–∫–∞
        if (errorMessage) {
            errorMessage.style.display = 'block';
            errorMessage.querySelector('p').textContent = 'There was a problem loading predictions. Please try again later.';
        }
    });
}