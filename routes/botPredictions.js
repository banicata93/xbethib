const express = require('express');
const router = express.Router();
const Prediction = require('../models/prediction');

// –ü—É–±–ª–∏—á–µ–Ω –º–∞—Ä—à—Ä—É—Ç –∑–∞ –≤–∑–µ–º–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ –æ—Ç –±–æ—Ç–∞
router.get('/public', async (req, res) => {
    try {
        // –ù–∞–º–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ –∏ –≥–∏ —Å–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ –¥–∞—Ç–∞ (–Ω–∞–π-–Ω–æ–≤–∏—Ç–µ –ø—ä—Ä–≤–∏)
        // –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ç–µ, –∑–∞ –¥–∞ –ø–æ–∫–∞–∂–µ–º —Å–∞–º–æ —Ç–µ–∑–∏, –∫–æ–∏—Ç–æ —Å–∞ –≤–∞–ª–∏–¥–Ω–∏
        const botPredictions = await Prediction.find({
            $or: [
                // –ü–æ–∫–∞–∑–≤–∞–º–µ –ø—Ä–æ–≥–Ω–æ–∑–∏ –æ—Ç –±–æ—Ç–∞
                { source: 'FootballBot' },
                // –ò–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏, –∫–æ–∏—Ç–æ –Ω–µ —Å–∞ —Å–∞–º–æ "1"
                { prediction: { $ne: '1' } }
            ]
        }).sort({ matchDate: -1 });
        
        const formattedPredictions = botPredictions.map(p => {
            const prediction = p.toObject();
            // –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–º–µ –¥–∞—Ç–∞—Ç–∞ –≤ UTC
            const date = new Date(prediction.matchDate);
            prediction.matchDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));
            return prediction;
        });

        res.json(formattedPredictions);
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –≤ GET /botPredictions/public:', error);
        res.status(500).json({ message: error.message });
    }
});

// –°–ø–µ—Ü–∏–∞–ª–µ–Ω –º–∞—Ä—à—Ä—É—Ç –∑–∞ –ø—Ä–∏–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –æ—Ç –±–æ—Ç–∞ (–±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è)
router.post('/bot-import', async (req, res) => {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –æ—Ç –±–æ—Ç–∞:', req.body);
        
        if (!Array.isArray(req.body) && !req.body.predictions) {
            return res.status(400).json({ 
                message: '–ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ',
                received: req.body
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–∞–Ω–Ω–∏—Ç–µ —Å–∞ –≤ –º–∞—Å–∏–≤ –∏–ª–∏ –≤ –æ–±–µ–∫—Ç —Å –ø–æ–ª–µ predictions
        const predictionsData = Array.isArray(req.body) ? req.body : req.body.predictions;
        
        if (!Array.isArray(predictionsData) || predictionsData.length === 0) {
            return res.status(400).json({ 
                message: '–ù—è–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏ –∑–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ',
                received: req.body
            });
        }
        
        const predictions = [];
        
        for (const item of predictionsData) {
            const { matchDate, homeTeam, awayTeam, leagueFlag, prediction, confidence, source } = item;
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥—è—â–∏—Ç–µ –¥–∞–Ω–Ω–∏
            if (!matchDate || !homeTeam || !awayTeam || !prediction) {
                console.warn('–ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∑–∞–ø–∏—Å:', item);
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–º–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∏—Ç–µ –∑–∞–ø–∏—Å–∏
            }
            
            const date = new Date(matchDate);
            
            // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞ –µ –≤–∞–ª–∏–¥–Ω–∞ –∏ –Ω–µ –µ —Å–∞–º–æ "1"
            if (prediction && prediction !== "1" || (prediction === "1" && source === "FootballBot")) {
                predictions.push({
                    matchDate: date,
                    homeTeam,
                    awayTeam,
                    leagueFlag: leagueFlag || 'üåç', // –ê–∫–æ –Ω—è–º–∞ —Ñ–ª–∞–≥, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –≥–ª–æ–±—É—Å
                    prediction,
                    confidence: confidence || 70,
                    source: source || 'FootballBot'
                });
            } else {
                console.warn('–ù–µ–≤–∞–ª–∏–¥–Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞:', prediction, '–∑–∞ –º–∞—á:', homeTeam, '-', awayTeam);
            }
        }
        
        if (predictions.length === 0) {
            return res.status(400).json({ message: '–ù—è–º–∞ –≤–∞–ª–∏–¥–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ –∑–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ' });
        }
        
        const savedPredictions = await Prediction.insertMany(predictions);
        console.log(`–ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏ ${savedPredictions.length} –ø—Ä–æ–≥–Ω–æ–∑–∏ –æ—Ç –±–æ—Ç–∞`);
        res.status(201).json({
            success: true,
            count: savedPredictions.length,
            predictions: savedPredictions
        });
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –≤ POST /botPredictions/bot-import:', error);
        res.status(400).json({ success: false, message: error.message });
    }
});

module.exports = router;
