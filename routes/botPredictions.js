const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const BotPrediction = require('../models/botPrediction');

// Middleware –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ JWT —Ç–æ–∫–µ–Ω
const auth = (req, res, next) => {
    try {
        const token = req.header('Authorization')?.replace('Bearer ', '');
        console.log('–ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:', token);
        
        if (!token) {
            console.log('–ù–µ –µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–µ–Ω —Ç–æ–∫–µ–Ω');
            return res.status(401).json({ message: '–ò–∑–∏—Å–∫–≤–∞ —Å–µ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è' });
        }

        try {
            const JWT_SECRET = process.env.JWT_SECRET;
            if (!JWT_SECRET) {
                console.error('JWT_SECRET –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω –≤ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏—Ç–µ –Ω–∞ —Å—Ä–µ–¥–∞—Ç–∞');
                return res.status(500).json({ message: '–ì—Ä–µ—à–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞' });
            }

            const decoded = jwt.verify(token, JWT_SECRET);
            console.log('–¢–æ–∫–µ–Ω—ä—Ç –µ –ø—Ä–æ–≤–µ—Ä–µ–Ω:', decoded);
            req.user = decoded;
            next();
        } catch (error) {
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –Ω–∞ —Ç–æ–∫–µ–Ω–∞ –µ –Ω–µ—É—Å–ø–µ—à–Ω–∞:', error.message);
            return res.status(401).json({ message: '–ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ç–æ–∫–µ–Ω' });
        }
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –≤ middleware –∑–∞ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è:', error);
        return res.status(500).json({ message: '–ì—Ä–µ—à–∫–∞ –≤ —Å—ä—Ä–≤—ä—Ä–∞' });
    }
};

// –ü—É–±–ª–∏—á–µ–Ω –º–∞—Ä—à—Ä—É—Ç –∑–∞ –≤–∑–µ–º–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ –æ—Ç –±–æ—Ç–∞
router.get('/public', async (req, res) => {
    try {
        // –ù–∞–º–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ –æ—Ç –±–æ—Ç–∞ –∏ –≥–∏ —Å–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ –¥–∞—Ç–∞ (–Ω–∞–π-–Ω–æ–≤–∏—Ç–µ –ø—ä—Ä–≤–∏)
        const botPredictions = await BotPrediction.find().sort({ matchDate: -1 });
        
        const formattedPredictions = botPredictions.map(p => {
            const prediction = p.toObject();
            // –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–º–µ –¥–∞—Ç–∞—Ç–∞ –≤ UTC
            const date = new Date(prediction.matchDate);
            prediction.matchDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));
            return prediction;
        });

        res.json(formattedPredictions);
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –≤ GET /botPredictions/public:', error);
        res.status(500).json({ message: error.message });
    }
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ –æ—Ç –±–æ—Ç–∞ (–∑–∞—â–∏—Ç–µ–Ω –º–∞—Ä—à—Ä—É—Ç)
router.get('/', auth, async (req, res) => {
    try {
        // –ù–∞–º–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ –æ—Ç –±–æ—Ç–∞ –∏ –≥–∏ —Å–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ –¥–∞—Ç–∞ (–Ω–∞–π-–Ω–æ–≤–∏—Ç–µ –ø—ä—Ä–≤–∏)
        const botPredictions = await BotPrediction.find().sort({ matchDate: -1 });
        
        const formattedPredictions = botPredictions.map(p => {
            const prediction = p.toObject();
            // –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–º–µ –¥–∞—Ç–∞—Ç–∞ –≤ UTC
            const date = new Date(prediction.matchDate);
            prediction.matchDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));
            return prediction;
        });

        res.json(formattedPredictions);
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –≤ GET /botPredictions:', error);
        res.status(500).json({ message: error.message });
    }
});

// –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç –±–æ—Ç–∞ (–∑–∞—â–∏—Ç–µ–Ω –º–∞—Ä—à—Ä—É—Ç)
router.post('/', auth, async (req, res) => {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç –±–æ—Ç–∞:', req.body);
        const { matchDate, homeTeam, awayTeam, leagueFlag, prediction, confidence, source } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥—è—â–∏—Ç–µ –¥–∞–Ω–Ω–∏
        if (!matchDate || !homeTeam || !awayTeam || !leagueFlag || !prediction) {
            return res.status(400).json({ 
                message: '–í—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏',
                received: req.body
            });
        }

        const date = new Date(matchDate);
        console.log('–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç –±–æ—Ç–∞:', {
            date: date.toISOString(),
            homeTeam,
            awayTeam,
            leagueFlag,
            prediction,
            confidence,
            source
        });

        const newBotPrediction = new BotPrediction({
            matchDate: date,
            homeTeam,
            awayTeam,
            leagueFlag,
            prediction,
            confidence: confidence || 70,
            source: source || 'bot'
        });

        const savedBotPrediction = await newBotPrediction.save();
        console.log('–ó–∞–ø–∞–∑–µ–Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç –±–æ—Ç–∞:', savedBotPrediction);
        res.status(201).json(savedBotPrediction);
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –≤ POST /botPredictions:', error);
        res.status(400).json({ message: error.message });
    }
});

// –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç –±–æ—Ç–∞ (–∑–∞—â–∏—Ç–µ–Ω –º–∞—Ä—à—Ä—É—Ç)
router.put('/:id', auth, async (req, res) => {
    try {
        const botPrediction = await BotPrediction.findByIdAndUpdate(
            req.params.id,
            req.body,
            { new: true }
        );
        res.json(botPrediction);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç –±–æ—Ç–∞ (–∑–∞—â–∏—Ç–µ–Ω –º–∞—Ä—à—Ä—É—Ç)
router.delete('/:id', auth, async (req, res) => {
    try {
        await BotPrediction.findByIdAndDelete(req.params.id);
        res.json({ message: '–ü—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞ –æ—Ç –±–æ—Ç–∞ –µ –∏–∑—Ç—Ä–∏—Ç–∞' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// –°–ø–µ—Ü–∏–∞–ª–µ–Ω –º–∞—Ä—à—Ä—É—Ç –∑–∞ –ø—Ä–∏–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –æ—Ç –±–æ—Ç–∞ (–±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è)
router.post('/bot-import', async (req, res) => {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –æ—Ç –±–æ—Ç–∞:', req.body);
        
        if (!Array.isArray(req.body) && !req.body.predictions) {
            return res.status(400).json({ 
                message: '–ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ',
                received: req.body
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–∞–Ω–Ω–∏—Ç–µ —Å–∞ –≤ –º–∞—Å–∏–≤ –∏–ª–∏ –≤ –æ–±–µ–∫—Ç —Å –ø–æ–ª–µ predictions
        const predictionsData = Array.isArray(req.body) ? req.body : req.body.predictions;
        
        if (!Array.isArray(predictionsData) || predictionsData.length === 0) {
            return res.status(400).json({ 
                message: '–ù—è–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏ –∑–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ',
                received: req.body
            });
        }
        
        const predictions = [];
        
        for (const item of predictionsData) {
            const { matchDate, homeTeam, awayTeam, leagueFlag, prediction, confidence, source } = item;
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥—è—â–∏—Ç–µ –¥–∞–Ω–Ω–∏
            if (!matchDate || !homeTeam || !awayTeam || !prediction) {
                console.warn('–ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∑–∞–ø–∏—Å:', item);
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–º–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∏—Ç–µ –∑–∞–ø–∏—Å–∏
            }
            
            const date = new Date(matchDate);
            
            predictions.push({
                matchDate: date,
                homeTeam,
                awayTeam,
                leagueFlag: leagueFlag || 'üåç', // –ê–∫–æ –Ω—è–º–∞ —Ñ–ª–∞–≥, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –≥–ª–æ–±—É—Å
                prediction,
                confidence: confidence || 70,
                source: source || 'bot'
            });
        }
        
        if (predictions.length === 0) {
            return res.status(400).json({ message: '–ù—è–º–∞ –≤–∞–ª–∏–¥–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ –∑–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ' });
        }
        
        const savedPredictions = await BotPrediction.insertMany(predictions);
        console.log(`–ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏ ${savedPredictions.length} –ø—Ä–æ–≥–Ω–æ–∑–∏ –æ—Ç –±–æ—Ç–∞`);
        res.status(201).json({
            success: true,
            count: savedPredictions.length,
            predictions: savedPredictions
        });
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –≤ POST /botPredictions/bot-import:', error);
        res.status(400).json({ success: false, message: error.message });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –∑–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∏ –æ—Ç –±–æ—Ç–∞ (–∑–∞—â–∏—Ç–µ–Ω –º–∞—Ä—à—Ä—É—Ç)
router.post('/batch', auth, async (req, res) => {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –ø–∞–∫–µ—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ:', req.body);
        
        if (!Array.isArray(req.body) || req.body.length === 0) {
            return res.status(400).json({ 
                message: '–û—á–∞–∫–≤–∞ —Å–µ –º–∞—Å–∏–≤ –æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏',
                received: req.body
            });
        }

        const predictions = [];
        
        for (const item of req.body) {
            const { matchDate, homeTeam, awayTeam, leagueFlag, prediction, confidence, source } = item;
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥—è—â–∏—Ç–µ –¥–∞–Ω–Ω–∏
            if (!matchDate || !homeTeam || !awayTeam || !leagueFlag || !prediction) {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–º–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∏—Ç–µ –∑–∞–ø–∏—Å–∏
            }

            const date = new Date(matchDate);
            
            predictions.push({
                matchDate: date,
                homeTeam,
                awayTeam,
                leagueFlag,
                prediction,
                confidence: confidence || 70,
                source: source || 'bot'
            });
        }

        if (predictions.length === 0) {
            return res.status(400).json({ message: '–ù—è–º–∞ –≤–∞–ª–∏–¥–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ –∑–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ' });
        }

        const savedPredictions = await BotPrediction.insertMany(predictions);
        console.log(`–ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏ ${savedPredictions.length} –ø—Ä–æ–≥–Ω–æ–∑–∏ –æ—Ç –±–æ—Ç–∞`);
        res.status(201).json(savedPredictions);
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –≤ POST /botPredictions/batch:', error);
        res.status(400).json({ message: error.message });
    }
});

module.exports = router;
